#!/bin/bash
sudo echo "Port 8080" >> /etc/ssh/sshd_config
sudo systemctl daemon-reload
sudo systemctl restart ssh || sudo systemctl restart sshd

### Install container runtime - containerd

# sysctl params required by setup, params persist across reboots
cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.ipv4.ip_forward = 1
EOF

# Apply sysctl params without reboot
sudo sysctl --system

Verify that net.ipv4.ip_forward is set to 1 with:
sysctl net.ipv4.ip_forward

sudo apt-get update
sudo apt-get install -y containerd
sudo mkdir -p /etc/containerd
containerd config default | sudo tee /etc/containerd/config.toml
sudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml
##nano /etc/containerd/config.toml

##[plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
  ...
##[plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
   ## SystemdCgroup = true

sudo systemctl restart containerd
sudo systemctl enable containerd
sudo systemctl status containerd

### Install Kubeadm, Kubelet, Kubectl
sudo ufw disable
sudo swapoff -a

sudo apt-get update
# apt-transport-https may be a dummy package; if so, you can skip that package
sudo apt-get install -y apt-transport-https ca-certificates curl gpg

# If the directory `/etc/apt/keyrings` does not exist, it should be created before the curl command, read the note below.
# sudo mkdir -p -m 755 /etc/apt/keyrings
curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.34/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg


# This overwrites any existing configuration in /etc/apt/sources.list.d/kubernetes.list
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.34/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list


sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl


#########End install tool##########

### Initiate Kubeadm control plane configuration on the master node
### Set env for master

IPADDR="10.0.0.4"
NODENAME=$(hostname -s)
POD_CIDR="192.168.0.0/16"

kubeadm init --apiserver-advertise-address=$IPADDR  --apiserver-cert-extra-sans=$IPADDR  --pod-network-cidr=$POD_CIDR --node-name $NODENAME --ignore-preflight-errors Swap

kubeadm init --pod-network-cidr=$POD_CIDR --control-plane-endpoint=$IPADDR 

mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config
#wget https://raw.githubusercontent.com/projectcalico/calico/v3.30.3/manifests/calico.yaml
#kubectl apply -f calico.yaml
kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.30.3/manifests/calico.yaml


kubectl get pods -n kube-system # Check fail control plane


#### Reset a worker after removed from a cluster

sudo kubeadm reset -f

sudo rm -rf /etc/cni/net.d
sudo rm -rf /var/lib/cni/
sudo rm -rf /var/lib/kubelet/*
sudo rm -rf /etc/Kubernetes/
sudo rm -rf /var/lib/etcd


kubectl -n kube-system edit cm kubeadm-config

kubeadm join 10.0.9.84:6443 --token cvk1yc.pe8fki5nep6hi0so --discovery-token-ca-cert-hash sha256:e762cdc6b0aa3ad1894a7709aa77a259af3f8d46ae8e6d713a32487f3df0e3bd \
        --control-plane --certificate-key e44939a2548c91f87f2e7cb1c17b61dec1781c940908ace98d4dedd5ce4172b2

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 10.0.9.45:6443 --token 0wuagk.mn0l9ojvr1cdb0qn \
        --discovery-token-ca-cert-hash sha256:1aa7d418e9a7aae342c615efdc3ac97df3ae98bf111dec4e98c1b9f71b9f7f42


sudo kubeadm init phase upload-certs --upload-certs










#################################################################

- kubectl get pods
- kubectl describe pod `POD NAME` # Information about the pod
- kubectl creat -f **file.yml** # use **create** to create 
- kubectl get replicationcontroller
- kubectl get replicasets
- kubectl edit replicaset # edit replicaset is running
- kubectl scale --replicas=2 replicaset **[Replicaset Name]** # Scale up down replica
- kubectl scale --replicas=2 -f **file.yml**
- kubectl replace -f **file.yml**
- kubectl delete replicaset **[Replicaset Name]**
- kubectl create -f deployment.yaml
- kubectl get deployments
- kubectl get all
- kubectl rollout status deployment/myapp-deployment # show process
- kubectl rollout history deployment/myapp-deployment # show the revisions and history of our deployment
- kubectl edit deployment myapp-deployment
- kubectl apply -f deployment-definition.yml # Apply to apply the changes
- kubectl set image deployment/myapp-deployment \ **nginx**=nginx:1.9.1 # Update image directly instead of change in file, **nginx** is `container name`
- kubectl rollout undo deployment/myapp-deployment
- kubectl get svc

# Use containerd pull image from localhost registry, add flag --plain-http=true
- sudo ctr images pull --plain-http=true 10.0.0.5:5000/nginx-custom:latest



### Create https proxy by nginx
sudo scp -i ddd-root-key.pem -P 8080 ubuntu@10.0.0.5:/etc/ssl/certs/registry.crt /etc/containerd/certs.d/myregistry.https.d/ca.crt

# Registry
docker run -d --name registry -p 5000:5000 registry:2
curl http://127.0.0.1:5000/v2/
sudo apt update

### Cài và cấu hình Nginx làm reverse proxy HTTPS
sudo apt install -y nginx
sudo nano /etc/nginx/conf.d/registry.conf


### Tạo chứng chỉ tự ký có SAN (bắt buộc)
sudo mkdir -p /etc/ssl/private /etc/ssl/certs
sudo openssl req -x509 -nodes -newkey rsa:4096 \
  -keyout /etc/ssl/private/registry.key \
  -out /etc/ssl/certs/registry.crt \
  -days 365 \
  -subj "/CN=myregistry.https.d" \
  -addext "subjectAltName=DNS:myregistry.https.d"

sudo nginx -t
sudo systemctl restart nginx
curl -k https://myregistry.https.d/v2/ #check


# Cluster: Have to update in masters and workers
echo "[IP host Registry] myregistry.https.d" | sudo tee -a /etc/hosts
sudo systemctl restart containerd
sudo systemctl restart kubelet

sudo mkdir -p /etc/containerd/certs.d/myregistry.https.d
nano /etc/containerd/certs.d/myregistry.https.d/hosts.toml

### Copy cert
sudo scp -i ddd-root-key.pem -P 8080 ubuntu@10.0.0.5:/etc/ssl/certs/registry.crt /etc/containerd/certs.d/myregistry.https.d/ca.crt
sudo chmod 644 /etc/containerd/certs.d/myregistry.https.d/ca.crt

### Update system CA
sudo mkdir -p /usr/local/share/ca-certificates/extra
sudo cp /etc/containerd/certs.d/myregistry.https.d/ca.crt /usr/local/share/ca-certificates/extra/myregistry.crt
sudo update-ca-certificates

sudo systemctl restart containerd

### Test
sudo ctr images pull myregistry.https.d/nginx-custom:latest

getent hosts myregistry.https.d
# → 10.0.0.5 myregistry.https.d

